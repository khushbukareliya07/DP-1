//Recursion - exhausted approach - choose , not choose
//space - exponential
//time - exponentials


class Solution {
    public int rob(int[] nums) {
			if(nums == null || nums.length == 0) return 0;
			
			return helper(nums, 0, 0);
    }
	private int helper(int[] nums, int index, int money)
	{
		//base case
		if(index >= nums.length) return money;
		
		//not choose
		int case1 = helper(nums, index+1, money);
		
		//choose
		int case2 = helper(nums, index+2, money + nums[index]);
		
		return Math.max(case1, case2);
	}
}

//Optimized approach//DP
//Using two vars - Skip and take, uodate it at every instance of array. 
//TC- O(n) -- only traversing through the length of the nums array
//sc- constant, as we are just using two vars. 

class Solution {
    public int rob(int[] nums) {
			if(nums == null || nums.length == 0) return 0;
			
			int skip =0, take = nums[0];
			
			for(int i =1; i < nums.length; i++)
			{
				int temp = skip;
				
				//do not choose
				skip = Math.max(skip, take);
				
				//choose
				take = temp + nums[i];
			}
			return Math.max(skip, take);
    }
	
}
